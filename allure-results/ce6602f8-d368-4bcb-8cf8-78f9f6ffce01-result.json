{"name": "test_open_magento", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=117.0.5938.149)\nStacktrace:\n0   chromedriver                        0x0000000104dbed68 chromedriver + 4337000\n1   chromedriver                        0x0000000104db6de4 chromedriver + 4304356\n2   chromedriver                        0x00000001049e3a5c chromedriver + 293468\n3   chromedriver                        0x00000001049bc6c0 chromedriver + 132800\n4   chromedriver                        0x0000000104a5004c chromedriver + 737356\n5   chromedriver                        0x0000000104a63198 chromedriver + 815512\n6   chromedriver                        0x0000000104a1ca5c chromedriver + 526940\n7   chromedriver                        0x0000000104a1d908 chromedriver + 530696\n8   chromedriver                        0x0000000104d84db4 chromedriver + 4099508\n9   chromedriver                        0x0000000104d89270 chromedriver + 4117104\n10  chromedriver                        0x0000000104d8f4fc chromedriver + 4142332\n11  chromedriver                        0x0000000104d89d70 chromedriver + 4119920\n12  chromedriver                        0x0000000104d61a44 chromedriver + 3955268\n13  chromedriver                        0x0000000104da6a18 chromedriver + 4237848\n14  chromedriver                        0x0000000104da6b94 chromedriver + 4238228\n15  chromedriver                        0x0000000104db6a5c chromedriver + 4303452\n16  libsystem_pthread.dylib             0x000000018f06b034 _pthread_start + 136\n17  libsystem_pthread.dylib             0x000000018f065e3c thread_start + 8", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"834114d4b52a99d26364fc631427e4ef\")>\n\n    @allure.step(\"Open the marketplace\")\n    def test_open_magento(driver):\n            # User opens the marketplace\n        driver.maximize_window()\n        driver.get(\"https://magento.softwaretestingboard.com/\")\n    \n    # @allure.step(\"User do sign\")\n    # def user_sign(driver):\n        click_sign = WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.XPATH, SIGN_BUTTON))\n        )\n        click_sign.click()\n    \n        input_email_sign = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.XPATH, SIGN_EMAIL_FORM))\n        )\n    \n        input_email_sign.send_keys(\"nugrah@yopmail.com\")\n    \n        input_pass_sign = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.XPATH, PASS))\n        )\n    \n        input_pass_sign.send_keys(\"Test1234\")\n    \n        click_sign_button = WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.XPATH, SUBMIT_SIGN))\n        )\n        click_sign_button.click()\n    \n        element = WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.XPATH, WOMEN_BUTTON))\n        )\n        element.click()\n    \n        # Repeat the product selection and add-to-cart steps for WIDGET_PRODUCT_1, WIDGET_PRODUCT_2, and WIDGET_PRODUCT_3\n        for product_xpath in [WIDGET_PRODUCT_1, WIDGET_PRODUCT_2, WIDGET_PRODUCT_3]:\n            product = WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable((By.XPATH, product_xpath))\n            )\n            product.click()\n    \n            select_size = WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable((By.XPATH, SIZE_BUTTON_XS))\n            )\n            select_size.click()\n    \n            select_color = WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable((By.XPATH, COLLOR_BUTTON_BLUE if product_xpath == WIDGET_PRODUCT_1 else COLLOR_BUTTON_PURPLE))\n            )\n            select_color.click()\n    \n            add_cart = WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable((By.XPATH, ADD_CART_BUTTON))\n            )\n            add_cart.click()\n    \n>           wait_added = WebDriverWait(driver, 100).until(\n                EC.element_to_be_clickable((By.XPATH, ADDED_ELEMENT))\n            )\n\ntest.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../test/venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:86: in until\n    value = method(self._driver)\n../test/venv/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:354: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n../test/venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../test/venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x103af9a50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...00018f06b034 _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x000000018f065e3c thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=117.0.5938.149)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104dbed68 chromedriver + 4337000\nE       1   chromedriver                        0x0000000104db6de4 chromedriver + 4304356\nE       2   chromedriver                        0x00000001049e3a5c chromedriver + 293468\nE       3   chromedriver                        0x00000001049bc6c0 chromedriver + 132800\nE       4   chromedriver                        0x0000000104a5004c chromedriver + 737356\nE       5   chromedriver                        0x0000000104a63198 chromedriver + 815512\nE       6   chromedriver                        0x0000000104a1ca5c chromedriver + 526940\nE       7   chromedriver                        0x0000000104a1d908 chromedriver + 530696\nE       8   chromedriver                        0x0000000104d84db4 chromedriver + 4099508\nE       9   chromedriver                        0x0000000104d89270 chromedriver + 4117104\nE       10  chromedriver                        0x0000000104d8f4fc chromedriver + 4142332\nE       11  chromedriver                        0x0000000104d89d70 chromedriver + 4119920\nE       12  chromedriver                        0x0000000104d61a44 chromedriver + 3955268\nE       13  chromedriver                        0x0000000104da6a18 chromedriver + 4237848\nE       14  chromedriver                        0x0000000104da6b94 chromedriver + 4238228\nE       15  chromedriver                        0x0000000104db6a5c chromedriver + 4303452\nE       16  libsystem_pthread.dylib             0x000000018f06b034 _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x000000018f065e3c thread_start + 8\n\n../test/venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException"}, "steps": [{"name": "Open the marketplace", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=117.0.5938.149)\nStacktrace:\n0   chromedriver                        0x0000000104dbed68 chromedriver + 4337000\n1   chromedriver                        0x0000000104db6de4 chromedriver + 4304356\n2   chromedriver                        0x00000001049e3a5c chromedriver + 293468\n3   chromedriver                        0x00000001049bc6c0 chromedriver + 132800\n4   chromedriver                        0x0000000104a5004c chromedriver + 737356\n5   chromedriver                        0x0000000104a63198 chromedriver + 815512\n6   chromedriver                        0x0000000104a1ca5c chromedriver + 526940\n7   chromedriver                        0x0000000104a1d908 chromedriver + 530696\n8   chromedriver                        0x0000000104d84db4 chromedriver + 4099508\n9   chromedriver                        0x0000000104d89270 chromedriver + 4117104\n10  chromedriver                        0x0000000104d8f4fc chromedriver + 4142332\n11  chromedriver                        0x0000000104d89d70 chromedriver + 4119920\n12  chromedriver                        0x0000000104d61a44 chromedriver + 3955268\n13  chromedriver                        0x0000000104da6a18 chromedriver + 4237848\n14  chromedriver                        0x0000000104da6b94 chromedriver + 4238228\n15  chromedriver                        0x0000000104db6a5c chromedriver + 4303452\n16  libsystem_pthread.dylib             0x000000018f06b034 _pthread_start + 136\n17  libsystem_pthread.dylib             0x000000018f065e3c thread_start + 8\n\n", "trace": "  File \"/Users/nugrahpratama/Developer/test/venv/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/Users/nugrahpratama/Developer/selenium/test.py\", line 98, in test_open_magento\n    wait_added = WebDriverWait(driver, 100).until(\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/nugrahpratama/Developer/test/venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py\", line 86, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/nugrahpratama/Developer/test/venv/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py\", line 354, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/nugrahpratama/Developer/test/venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 738, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/nugrahpratama/Developer/test/venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"/Users/nugrahpratama/Developer/test/venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"834114d4b52a99d26364fc631427e4ef\")>"}], "start": 1697350497958, "stop": 1697350509002}], "start": 1697350497958, "stop": 1697350509005, "uuid": "b118389b-0b82-4c6e-84b8-9038b32f432b", "historyId": "451f90164e96d5c7926f046e708bb68c", "testCaseId": "451f90164e96d5c7926f046e708bb68c", "fullName": "test#test_open_magento", "labels": [{"name": "suite", "value": "test"}, {"name": "host", "value": "192.168.1.16"}, {"name": "thread", "value": "6115-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test"}]}